package main

import (
	"bytes"
	"fmt"
	"io"
	"os"
	"regexp"
	"sort"
	"strconv"
	"strings"

	"github.com/gdamore/tcell/v2"
	"github.com/lestrrat-go/codegen"
	"github.com/pkg/errors"
)

func main() {
	if err := _main(); err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
}

func _main() error {
	if err := genTermboxKeys(); err != nil {
		return errors.Wrap(err, `failed to generate termbox key definitions`)
	}

	if err := genTcellKeys(); err != nil {
		return errors.Wrap(err, `failed to generate tcell key definitions`)
	}

	if err := genTcellColors(); err != nil {
		return errors.Wrap(err, `failed to generate tcell color definitions`)
	}
	return nil
}

func genTcellKeys() error {
	// refs: https://github.com/gdamore/tcell/blob/master/key.go

	// maps tcell.* to peco.*
	type KeySpec struct {
		src  string // "Foo" turns into "tcell.Foo"
		dst  string // "Foo" turns into "peco.Foo". If omitted, will use src
		name string // string representation
	}

	re := regexp.MustCompile(`^Ctrl-(.+)$`)

	var keys []KeySpec
	for _, n := range tcell.KeyNames {
		name := n
		if m := re.FindStringSubmatch(n); len(m) > 1 {
			if len(m[1]) > 1 {
				n = strings.Replace(n, n[len(n)-len(m[1])-1:], m[1], 1)
				name = "C-" + m[1]
			} else {
				r := n[len(n)-1] // last rune
				if (r >= 'a' && r <= 'z') || (r >= 'A' && r <= 'Z') || (r >= '0' && r <= '9') {
					n = strings.Replace(n, n[len(n)-2:], string([]byte{r}), 1)
					name = "C-" + string([]byte{r})
				} else {
					// TODO
					continue
				}
			}
		}
		keys = append(keys, KeySpec{src: "Key" + n, name: name})
	}

	sort.Slice(keys, func(i, j int) bool {
		return keys[i].src < keys[j].src
	})

	var buf bytes.Buffer

	fmt.Fprintf(&buf, "// +build tcell")
	fmt.Fprintf(&buf, "\n\n// Auto-generated by internal/cmd/gensym/gensym.go. DO NOT EDIT!")
	fmt.Fprintf(&buf, "\npackage peco")

	codegen.WriteImports(&buf, "github.com/gdamore/tcell")

	fmt.Fprintf(&buf, "\n\ntype Attribute uint16")
	fmt.Fprintf(&buf, "\n\ntype KeyCode = tcell.Key")

	var aliases bytes.Buffer
	var initFunc bytes.Buffer

	fmt.Fprintf(&initFunc, "\n\nfunc init() {")
	fmt.Fprintf(&aliases, "\n\nconst (")
	for _, key := range keys {
		dst := key.dst
		if dst == "" {
			dst = key.src
		}

		fmt.Fprintf(&aliases, "\n%s = tcell.%s", dst, key.src)
		fmt.Fprintf(&initFunc, "\ndb.Map(%s, tcell.%s)", strconv.Quote(key.name), dst)
	}
	fmt.Fprintf(&aliases, "\n)")
	fmt.Fprintf(&initFunc, "\n}")

	aliases.WriteTo(&buf)
	initFunc.WriteTo(&buf)

	fmt.Fprintf(&buf, "\n\nfunc (scr *tcellScreen) Print(msg string) *PrintCmd {")
	fmt.Fprintf(&buf, "\nreturn newPrintCmd(scr, msg)")
	fmt.Fprintf(&buf, "\n}")

	// copy content to a temporary location so we can use it for error reporting
	var save bytes.Buffer
	if err := codegen.WriteFile("tcell_keys.go", io.TeeReader(&buf, &save), codegen.WithFormatCode(true)); err != nil {
		codegen.Write(os.Stderr, &save, codegen.WithLineNumber(true))
		return errors.Wrap(err, `failed to write to tcell_keys.go`)
	}
	return nil
}

func genTcellColors() error {
	var colors = []string{
		"ColorBlack",
		"ColorMaroon",
		"ColorGreen",
		"ColorOlive",
		"ColorNavy",
		"ColorPurple",
		"ColorTeal",
		"ColorSilver",
		"ColorGray",
		"ColorRed",
		"ColorLime",
		"ColorYellow",
		"ColorBlue",
		"ColorFuchsia",
		"ColorAqua",
		"ColorWhite",
		"Color16",
		"Color17",
		"Color18",
		"Color19",
		"Color20",
		"Color21",
		"Color22",
		"Color23",
		"Color24",
		"Color25",
		"Color26",
		"Color27",
		"Color28",
		"Color29",
		"Color30",
		"Color31",
		"Color32",
		"Color33",
		"Color34",
		"Color35",
		"Color36",
		"Color37",
		"Color38",
		"Color39",
		"Color40",
		"Color41",
		"Color42",
		"Color43",
		"Color44",
		"Color45",
		"Color46",
		"Color47",
		"Color48",
		"Color49",
		"Color50",
		"Color51",
		"Color52",
		"Color53",
		"Color54",
		"Color55",
		"Color56",
		"Color57",
		"Color58",
		"Color59",
		"Color60",
		"Color61",
		"Color62",
		"Color63",
		"Color64",
		"Color65",
		"Color66",
		"Color67",
		"Color68",
		"Color69",
		"Color70",
		"Color71",
		"Color72",
		"Color73",
		"Color74",
		"Color75",
		"Color76",
		"Color77",
		"Color78",
		"Color79",
		"Color80",
		"Color81",
		"Color82",
		"Color83",
		"Color84",
		"Color85",
		"Color86",
		"Color87",
		"Color88",
		"Color89",
		"Color90",
		"Color91",
		"Color92",
		"Color93",
		"Color94",
		"Color95",
		"Color96",
		"Color97",
		"Color98",
		"Color99",
		"Color100",
		"Color101",
		"Color102",
		"Color103",
		"Color104",
		"Color105",
		"Color106",
		"Color107",
		"Color108",
		"Color109",
		"Color110",
		"Color111",
		"Color112",
		"Color113",
		"Color114",
		"Color115",
		"Color116",
		"Color117",
		"Color118",
		"Color119",
		"Color120",
		"Color121",
		"Color122",
		"Color123",
		"Color124",
		"Color125",
		"Color126",
		"Color127",
		"Color128",
		"Color129",
		"Color130",
		"Color131",
		"Color132",
		"Color133",
		"Color134",
		"Color135",
		"Color136",
		"Color137",
		"Color138",
		"Color139",
		"Color140",
		"Color141",
		"Color142",
		"Color143",
		"Color144",
		"Color145",
		"Color146",
		"Color147",
		"Color148",
		"Color149",
		"Color150",
		"Color151",
		"Color152",
		"Color153",
		"Color154",
		"Color155",
		"Color156",
		"Color157",
		"Color158",
		"Color159",
		"Color160",
		"Color161",
		"Color162",
		"Color163",
		"Color164",
		"Color165",
		"Color166",
		"Color167",
		"Color168",
		"Color169",
		"Color170",
		"Color171",
		"Color172",
		"Color173",
		"Color174",
		"Color175",
		"Color176",
		"Color177",
		"Color178",
		"Color179",
		"Color180",
		"Color181",
		"Color182",
		"Color183",
		"Color184",
		"Color185",
		"Color186",
		"Color187",
		"Color188",
		"Color189",
		"Color190",
		"Color191",
		"Color192",
		"Color193",
		"Color194",
		"Color195",
		"Color196",
		"Color197",
		"Color198",
		"Color199",
		"Color200",
		"Color201",
		"Color202",
		"Color203",
		"Color204",
		"Color205",
		"Color206",
		"Color207",
		"Color208",
		"Color209",
		"Color210",
		"Color211",
		"Color212",
		"Color213",
		"Color214",
		"Color215",
		"Color216",
		"Color217",
		"Color218",
		"Color219",
		"Color220",
		"Color221",
		"Color222",
		"Color223",
		"Color224",
		"Color225",
		"Color226",
		"Color227",
		"Color228",
		"Color229",
		"Color230",
		"Color231",
		"Color232",
		"Color233",
		"Color234",
		"Color235",
		"Color236",
		"Color237",
		"Color238",
		"Color239",
		"Color240",
		"Color241",
		"Color242",
		"Color243",
		"Color244",
		"Color245",
		"Color246",
		"Color247",
		"Color248",
		"Color249",
		"Color250",
		"Color251",
		"Color252",
		"Color253",
		"Color254",
		"Color255",
		"ColorAliceBlue",
		"ColorAntiqueWhite",
		"ColorAquaMarine",
		"ColorAzure",
		"ColorBeige",
		"ColorBisque",
		"ColorBlanchedAlmond",
		"ColorBlueViolet",
		"ColorBrown",
		"ColorBurlyWood",
		"ColorCadetBlue",
		"ColorChartreuse",
		"ColorChocolate",
		"ColorCoral",
		"ColorCornflowerBlue",
		"ColorCornsilk",
		"ColorCrimson",
		"ColorDarkBlue",
		"ColorDarkCyan",
		"ColorDarkGoldenrod",
		"ColorDarkGray",
		"ColorDarkGreen",
		"ColorDarkKhaki",
		"ColorDarkMagenta",
		"ColorDarkOliveGreen",
		"ColorDarkOrange",
		"ColorDarkOrchid",
		"ColorDarkRed",
		"ColorDarkSalmon",
		"ColorDarkSeaGreen",
		"ColorDarkSlateBlue",
		"ColorDarkSlateGray",
		"ColorDarkTurquoise",
		"ColorDarkViolet",
		"ColorDeepPink",
		"ColorDeepSkyBlue",
		"ColorDimGray",
		"ColorDodgerBlue",
		"ColorFireBrick",
		"ColorFloralWhite",
		"ColorForestGreen",
		"ColorGainsboro",
		"ColorGhostWhite",
		"ColorGold",
		"ColorGoldenrod",
		"ColorGreenYellow",
		"ColorHoneydew",
		"ColorHotPink",
		"ColorIndianRed",
		"ColorIndigo",
		"ColorIvory",
		"ColorKhaki",
		"ColorLavender",
		"ColorLavenderBlush",
		"ColorLawnGreen",
		"ColorLemonChiffon",
		"ColorLightBlue",
		"ColorLightCoral",
		"ColorLightCyan",
		"ColorLightGoldenrodYellow",
		"ColorLightGray",
		"ColorLightGreen",
		"ColorLightPink",
		"ColorLightSalmon",
		"ColorLightSeaGreen",
		"ColorLightSkyBlue",
		"ColorLightSlateGray",
		"ColorLightSteelBlue",
		"ColorLightYellow",
		"ColorLimeGreen",
		"ColorLinen",
		"ColorMediumAquamarine",
		"ColorMediumBlue",
		"ColorMediumOrchid",
		"ColorMediumPurple",
		"ColorMediumSeaGreen",
		"ColorMediumSlateBlue",
		"ColorMediumSpringGreen",
		"ColorMediumTurquoise",
		"ColorMediumVioletRed",
		"ColorMidnightBlue",
		"ColorMintCream",
		"ColorMistyRose",
		"ColorMoccasin",
		"ColorNavajoWhite",
		"ColorOldLace",
		"ColorOliveDrab",
		"ColorOrange",
		"ColorOrangeRed",
		"ColorOrchid",
		"ColorPaleGoldenrod",
		"ColorPaleGreen",
		"ColorPaleTurquoise",
		"ColorPaleVioletRed",
		"ColorPapayaWhip",
		"ColorPeachPuff",
		"ColorPeru",
		"ColorPink",
		"ColorPlum",
		"ColorPowderBlue",
		"ColorRebeccaPurple",
		"ColorRosyBrown",
		"ColorRoyalBlue",
		"ColorSaddleBrown",
		"ColorSalmon",
		"ColorSandyBrown",
		"ColorSeaGreen",
		"ColorSeashell",
		"ColorSienna",
		"ColorSkyblue",
		"ColorSlateBlue",
		"ColorSlateGray",
		"ColorSnow",
		"ColorSpringGreen",
		"ColorSteelBlue",
		"ColorTan",
		"ColorThistle",
		"ColorTomato",
		"ColorTurquoise",
		"ColorViolet",
		"ColorWheat",
		"ColorWhiteSmoke",
		"ColorYellowGreen",
	}

	var buf bytes.Buffer

	fmt.Fprintf(&buf, "// +build tcell")
	fmt.Fprintf(&buf, "\n\n// Auto-generated by internal/cmd/gensym/gensym.go. DO NOT EDIT!")
	fmt.Fprintf(&buf, "\npackage peco")

	codegen.WriteImports(&buf, "github.com/gdamore/tcell")

	fmt.Fprintf(&buf, "\n\ntype Color = tcell.Color")
	fmt.Fprintf(&buf, "\n\nconst (")
	for _, n := range colors {
		fmt.Fprintf(&buf, "\n%s = tcell.%s", n, n)
	}
	fmt.Fprintf(&buf, "\n)")

	// copy content to a temporary location so we can use it for error reporting
	var save bytes.Buffer
	if err := codegen.WriteFile("tcell_colors.go", io.TeeReader(&buf, &save), codegen.WithFormatCode(true)); err != nil {
		codegen.Write(os.Stderr, &save, codegen.WithLineNumber(true))
		return errors.Wrap(err, `failed to write to tcell_colors.go`)
	}
	return nil
}

func genTermboxKeys() error {
	keycodes := []string{
		"KeyF1",
		"KeyF2",
		"KeyF3",
		"KeyF4",
		"KeyF5",
		"KeyF6",
		"KeyF7",
		"KeyF8",
		"KeyF9",
		"KeyF10",
		"KeyF11",
		"KeyF12",
		"KeyInsert",
		"KeyDelete",
		"KeyHome",
		"KeyEnd",
		"KeyPgup",
		"KeyPgdn",
		"KeyArrowUp",
		"KeyArrowDown",
		"KeyArrowLeft",
		"KeyArrowRight",
		"MouseLeft",
		"MouseMiddle",
		"MouseRight",
		"MouseRelease",
		"MouseWheelUp",
		"MouseWheelDown",
		"KeyCtrlTilde",
		"KeyCtrl2",
		"KeyCtrlSpace",
		"KeyCtrlA",
		"KeyCtrlB",
		"KeyCtrlC",
		"KeyCtrlD",
		"KeyCtrlE",
		"KeyCtrlF",
		"KeyCtrlG",
		"KeyBackspace",
		"KeyCtrlH",
		"KeyTab",
		"KeyCtrlI",
		"KeyCtrlJ",
		"KeyCtrlK",
		"KeyCtrlL",
		"KeyEnter",
		"KeyCtrlM",
		"KeyCtrlN",
		"KeyCtrlO",
		"KeyCtrlP",
		"KeyCtrlQ",
		"KeyCtrlR",
		"KeyCtrlS",
		"KeyCtrlT",
		"KeyCtrlU",
		"KeyCtrlV",
		"KeyCtrlW",
		"KeyCtrlX",
		"KeyCtrlY",
		"KeyCtrlZ",
		"KeyEsc",
		"KeyCtrlLsqBracket",
		"KeyCtrl3",
		"KeyCtrl4",
		"KeyCtrlBackslash",
		"KeyCtrl5",
		"KeyCtrlRsqBracket",
		"KeyCtrl6",
		"KeyCtrl7",
		"KeyCtrlSlash",
		"KeyCtrlUnderscore",
		"KeySpace",
		"KeyBackspace2",
		"KeyCtrl8",
	}

	var buf bytes.Buffer

	fmt.Fprintf(&buf, "// +build !tcell")
	fmt.Fprintf(&buf, "\n\n// Auto-generated by internal/cmd/gensym/gensym.go. DO NOT EDIT!")
	fmt.Fprintf(&buf, "\npackage peco")

	codegen.WriteImports(&buf, "github.com/nsf/termbox-go")

	fmt.Fprintf(&buf, "\n\ntype KeyCode = termbox.Key")
	fmt.Fprintf(&buf, "\n\nconst (")
	for _, n := range keycodes {
		fmt.Fprintf(&buf, "\n%s KeyCode = termbox.%s", n, n)
	}
	fmt.Fprintf(&buf, "\n)")

	var save bytes.Buffer
	if err := codegen.WriteFile("termbox_keys_gen.go", io.TeeReader(&buf, &save), codegen.WithFormatCode(true)); err != nil {
		codegen.Write(os.Stderr, &save, codegen.WithLineNumber(true))
		return errors.Wrap(err, `failed to write to termbox_keys_gen.go`)
	}
	return nil
}
